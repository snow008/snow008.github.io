<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS</title>
    <url>/posts/3999917138.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>WEB基础</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/posts/787223889.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>WEB基础</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JS</title>
    <url>/posts/3106780478.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Jquery</title>
    <url>/posts/4255042143.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端</category>
        <category>Jquery</category>
      </categories>
      <tags>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>Node</title>
    <url>/posts/625821563.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>svn 基础</title>
    <url>/posts/3528644641.html</url>
    <content><![CDATA[<h1 id="centOS安装svn服务器（serversvn）-并搭建http服务访问"><a href="#centOS安装svn服务器（serversvn）-并搭建http服务访问" class="headerlink" title="centOS安装svn服务器（serversvn）,并搭建http服务访问"></a>centOS安装svn服务器（serversvn）,并搭建http服务访问</h1><pre><code>理解：
    必要技能
        ——linux：系统
        ——svn：版本管理库
        ——httpd：apache2的版本别名
        ——htpasswd：htpasswd 是开源 http 服务器 apache httpd 的一个命令工具，用于生成 http 基本认证的密码文件</code></pre><h2 id="linux系统安装svn"><a href="#linux系统安装svn" class="headerlink" title="linux系统安装svn"></a>linux系统安装svn</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install subversion      #使用yum默认安装</span><br><span class="line">svnserve --version          #查看svn版本</span><br></pre></td></tr></table></figure>
<h2 id="配置svn"><a href="#配置svn" class="headerlink" title="配置svn"></a>配置svn</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;var&#x2F;www&#x2F;svn      #创建版本库根目录</span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;svn         #进入主目录</span><br><span class="line">svnadmin create &#x2F;var&#x2F;www&#x2F;svn&#x2F;test      #创建本地版本库</span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;svn&#x2F;test    #进入版本库,</span><br><span class="line">ls                      #信息如下</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>db</td>
<td>存放所有的版本控制数据文件</td>
</tr>
<tr>
<td>hooks</td>
<td>放置hook脚本文件</td>
</tr>
<tr>
<td>locks</td>
<td>用来追踪存取文件库的客户端</td>
</tr>
<tr>
<td>format</td>
<td>一个文本文件，文件中只包含一个整数，表示当前文件库配置的版本号</td>
</tr>
<tr>
<td>conf</td>
<td>SVN版本库的配置文件（版本库的访问账号、权限等）</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd conf      #进入配置账号，权限目录</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>文件目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>authz</td>
<td>设置用户,以及读写权限</td>
</tr>
<tr>
<td>passwd</td>
<td>设置用户密码</td>
</tr>
<tr>
<td>svnserve.conf</td>
<td>配置当前版本库(允许匿名用户，仓库：地址等)</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim passwd  #配置用户密码（注意，等号两侧需要一个空格）</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/svn1.png" alt="密码"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim authz #配置用户读写权限</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/svn2.png" alt="密码"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim svnserve.conf #修改当前版本库配置，如下（注意开始一行每空格，等号两边有空格）</span><br><span class="line"></span><br><span class="line">anon-access &#x3D; read #匿名用户可读，您也可以设置 anon-access &#x3D; none，不允许匿名用户访问。设置为 none，可以使日志日期正常显示</span><br><span class="line">auth-access &#x3D; write #授权用户可写</span><br><span class="line">password-db &#x3D; passwd #使用哪个文件作为账号文件</span><br><span class="line">authz-db &#x3D; authz #使用哪个文件作为权限文件</span><br><span class="line">realm &#x3D; &#x2F;var&#x2F;www&#x2F;svn&#x2F;snow #认证空间名，版本库所在目录</span><br></pre></td></tr></table></figure>
<h2 id="启动版本库（默认端口是3609，记得添加到服务器的安全组）"><a href="#启动版本库（默认端口是3609，记得添加到服务器的安全组）" class="headerlink" title="启动版本库（默认端口是3609，记得添加到服务器的安全组）"></a>启动版本库（默认端口是3609，记得添加到服务器的安全组）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svnserve -d -r &#x2F;var&#x2F;www&#x2F;svn&#x2F;    #启动svnserve版本库</span><br><span class="line">killall svnserve            #该命令可停止SVN服务</span><br><span class="line">ps -ef |grep svn            #查看svn服务开启</span><br><span class="line">netstat -antup | grep ftp   #查看端口</span><br><span class="line">svnserve -d -r &#x2F;var&#x2F;www&#x2F;svn --listen-port 9999 #设置别的端口</span><br></pre></td></tr></table></figure>
<h2 id="本地安装svn客户端连接svn库，我的库为test"><a href="#本地安装svn客户端连接svn库，我的库为test" class="headerlink" title="本地安装svn客户端连接svn库，我的库为test"></a>本地安装svn客户端连接svn库，我的库为test</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn:&#x2F;&#x2F;实例公网IP地址&#x2F;SVN版本库名</span><br><span class="line">svn:&#x2F;&#x2F;11:22:33:44:9999&#x2F;snow</span><br></pre></td></tr></table></figure>

<h1 id="http访问svn（假设已经装了httpd）——建议使用svn-hooks钩子脚本"><a href="#http访问svn（假设已经装了httpd）——建议使用svn-hooks钩子脚本" class="headerlink" title="http访问svn（假设已经装了httpd）——建议使用svn hooks钩子脚本"></a>http访问svn（假设已经装了httpd）——建议使用svn hooks钩子脚本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y mod_dav_svn  #安装模块，这个模块可以让apache访问svn</span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;svn&#x2F;snow&#x2F;conf   #进入仓库配置目录</span><br><span class="line">mv passwd passwd.default    #将svn用户密码文件passwd改成passwd.default</span><br><span class="line">htpasswd -cm passwd yourname    #用htpasswd命令创建加密文件，用户名为yourname</span><br></pre></td></tr></table></figure>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><pre><code>1.authz的用户为yourname
2.svnserve.conf配置文件修改 password-db = passwd.default
3.htpasswd创建时会询问你设置密码
4.passwd这个文件是页面访问的密码，passwd.default里面是客户端的svn密码</code></pre><h1 id="权限跟apache配置"><a href="#权限跟apache配置" class="headerlink" title="权限跟apache配置"></a>权限跟apache配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R apache:apache &#x2F;var&#x2F;www&#x2F;svn     #递归设置用户，用户组</span><br><span class="line">cd &#x2F;etc&#x2F;httpd&#x2F;conf.d    #进入httpd的配置目录</span><br><span class="line">touch svn.conf          #创建http访问svn的配置文件，基于mod_dav_svn模块</span><br><span class="line"></span><br><span class="line"># svn.conf 第一种 配置svn总仓库目录，并不是svn项目目录</span><br><span class="line">    &lt;Location &#x2F;snow&gt;</span><br><span class="line">        DAV svn</span><br><span class="line">        SVNParentPath &#x2F;var&#x2F;www&#x2F;svn</span><br><span class="line">        SVNListParentPath on</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName &quot;Authorization SVN&quot;</span><br><span class="line">        AuthzSVNAccessFile &#x2F;var&#x2F;www&#x2F;svn&#x2F;snow&#x2F;conf&#x2F;authz</span><br><span class="line">        AuthUserFile &#x2F;var&#x2F;www&#x2F;svn&#x2F;snow&#x2F;conf&#x2F;passwd</span><br><span class="line">        Require valid-user</span><br><span class="line">    &lt;&#x2F;Location&gt;</span><br><span class="line"># svn.conf 第二种 配置svn项目目录</span><br><span class="line">    &lt;Location &#x2F;snow&gt;</span><br><span class="line">        DAV svn</span><br><span class="line">        #SVNParentPath &#x2F;var&#x2F;www&#x2F;svn</span><br><span class="line">        SVNPath &#x2F;var&#x2F;www&#x2F;svn&#x2F;snow</span><br><span class="line">        AuthType Basic</span><br><span class="line">        #SVNListParentPath on</span><br><span class="line">        AuthName &quot;Authorization SVN&quot;</span><br><span class="line">        AuthzSVNAccessFile &#x2F;var&#x2F;www&#x2F;svn&#x2F;snow&#x2F;conf&#x2F;authz</span><br><span class="line">        AuthUserFile &#x2F;var&#x2F;www&#x2F;svn&#x2F;snow&#x2F;conf&#x2F;passwd</span><br><span class="line">        #Satisfy all</span><br><span class="line">        Require valid-user</span><br><span class="line">    &lt;&#x2F;Location&gt;</span><br></pre></td></tr></table></figure>
<h1 id="重启服务器，防火墙放行"><a href="#重启服务器，防火墙放行" class="headerlink" title="重启服务器，防火墙放行"></a>重启服务器，防火墙放行</h1><pre><code>systemctl enable httpd
systemctl start httpd
firewall-cmd --permanent --add-service=http
firewall-cmd --reload
访问地址 http://你的ip地址/snow,就可以看到效果</code></pre><h1 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h1><pre><code>find / -name mod_dav_svn.so     #查看模块位置
find / -name mod_authz_svn.so   #查看模块位置
cat  /etc/httpd/logs/error_log  #查看错误日志
vim /etc/httpd/conf/httpd.conf  #修改apache配置,其他服务名，端口配置下
1.修改配置，重启http服务
    &lt;Directory /&gt;
        AllowOverride none
        #Require all denied
        Require all granted
    &lt;/Directory&gt;</code></pre>]]></content>
      <categories>
        <category>运维</category>
        <category>svn</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>angular</title>
    <url>/posts/1988130116.html</url>
    <content><![CDATA[<h2 id="angular之脏检查"><a href="#angular之脏检查" class="headerlink" title="angular之脏检查"></a>angular之脏检查</h2>]]></content>
      <categories>
        <category>前端</category>
        <category>angular</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>axios</title>
    <url>/posts/2694088402.html</url>
    <content><![CDATA[<h1 id="axios代理服务器"><a href="#axios代理服务器" class="headerlink" title="axios代理服务器"></a>axios代理服务器</h1>]]></content>
      <categories>
        <category>运维</category>
        <category>axios</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>ftp 操作</title>
    <url>/posts/3194002123.html</url>
    <content><![CDATA[<h1 id="ftp基本操作"><a href="#ftp基本操作" class="headerlink" title="ftp基本操作"></a>ftp基本操作</h1>]]></content>
      <categories>
        <category>运维</category>
        <category>ftp</category>
      </categories>
      <tags>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>git 基础</title>
    <url>/posts/1456454357.html</url>
    <content><![CDATA[<h1 id="git-分支查看与切换"><a href="#git-分支查看与切换" class="headerlink" title="git 分支查看与切换"></a>git 分支查看与切换</h1><table>
<thead>
<tr>
<th>git指令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>git branch -a</td>
<td>查看所有分支</td>
</tr>
<tr>
<td>git branch</td>
<td>查看当前使用分支(结果列表中前面标*号的表示当前使用分支)</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>运维</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/1243066710.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo插件</title>
    <url>/posts/1514123638.html</url>
    <content><![CDATA[<h2 id="Hexo插件篇"><a href="#Hexo插件篇" class="headerlink" title="Hexo插件篇"></a>Hexo插件篇</h2><h2 id="Valine聊天"><a href="#Valine聊天" class="headerlink" title="Valine聊天"></a>Valine聊天</h2><pre><code>1. 参考官网安装即可
2. $ npm install hexo-related-popular-posts --save</code></pre><p><a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">参考地址</a></p>
<p><a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">获取APP ID 和 APP Key</a> &nbsp;<a href="https://valine.js.org" target="_blank" rel="noopener">Valine官方文档</a></p>
<h2 id="热帖靠前"><a href="#热帖靠前" class="headerlink" title="热帖靠前"></a>热帖靠前</h2><p><a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">热帖显示</a></p>
<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><pre><code>1. 参考官网安装即可
2. $ npm install hexo-blog-encrypt --save</code></pre><p><a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">参考地址</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 常用命令对比记忆</title>
    <url>/posts/286651962.html</url>
    <content><![CDATA[<h1 id="在Linux系统下，chown和chmod区别"><a href="#在Linux系统下，chown和chmod区别" class="headerlink" title="在Linux系统下，chown和chmod区别"></a>在Linux系统下，chown和chmod区别</h1><pre><code>摘录：
    chown用来更改目录或文件的用户名和用户组的
    chmod用来修改目录或文件的访问权限</code></pre><h1 id="chown用法"><a href="#chown用法" class="headerlink" title="chown用法"></a>chown用法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown 用户名:组名 文件路径        #路径可以使相对路径,也可以是绝对路径</span><br><span class="line">chown root:root &#x2F;tmp&#x2F;tmp1       #将tem下的tmp1文件用户名,用户组改为root</span><br><span class="line">chown -R root:root &#x2F;tmp&#x2F;tmp1    #将tem下的tmp1下的所有文件用户名,用户组改为root</span><br></pre></td></tr></table></figure>

<h1 id="chmod用法"><a href="#chmod用法" class="headerlink" title="chmod用法"></a>chmod用法</h1><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown 用户名:组名 文件路径   #路径可以使相对路径,也可以是绝对路径</span><br><span class="line">chmod -R 777 &#x2F;home&#x2F;linux    #给当前文件以及子目录最高权限（递归）</span><br></pre></td></tr></table></figure></code></pre><h1 id="linux文件属性-权限——drwxrwxrwx"><a href="#linux文件属性-权限——drwxrwxrwx" class="headerlink" title="linux文件属性/权限——drwxrwxrwx"></a>linux文件属性/权限——drwxrwxrwx</h1><pre><code>d:dirtectory
r:read就是读权限     --数字4表示
w:write就是写权限    --数字2表示
x:excute就是执行权限 --数字1表示
第一个字母文件类型 d是目录、l是链接文件、-是普通文件、p是管道
出去第一个字母,后面的三个一组
第一组——文件的属主拥有的权限
第二组——文件属主所在同组的其他用户所具有的权限
第三组——其他用户所具有的权限
-rwxrwxrwx  ： 777 —— 超级权限
-rw-r--r--  ： 644
-r--r-----  ： 440</code></pre><p><a href="https://www.cnblogs.com/EasonJim/p/6525242.html" target="_blank" rel="noopener">linux文件属性详解</a></p>
<h1 id="su跟sudo区别"><a href="#su跟sudo区别" class="headerlink" title="su跟sudo区别"></a>su跟sudo区别</h1><pre><code>su 命令时,切换用户，默认是root
su www    #切换用户www
sudo    root管理员身份执行,减少root登录使用次数，提升系统安全，
或记录到日志中，是谁在使用sudo

/etc/sudoers    #sudo配置文件
sudo visudo     #修改sudo配置文件</code></pre><h1 id="ps-ef和ps-aux的区别及格式详解"><a href="#ps-ef和ps-aux的区别及格式详解" class="headerlink" title="ps -ef和ps aux的区别及格式详解"></a>ps -ef和ps aux的区别及格式详解</h1><pre><code>ps 显示系统进程的命令，其中-ef跟aux是linux的两种风格，一样的目的
显示用户名，uid，pid，cpu，TIME，CMD等
ps -ef</code></pre><p><a href="https://www.cnblogs.com/mydriverc/p/8303242.html" target="_blank" rel="noopener">ps -ef和ps aux详解</a></p>
<h1 id="linux的grep-命令跟-netstat命令"><a href="#linux的grep-命令跟-netstat命令" class="headerlink" title="linux的grep 命令跟 netstat命令"></a>linux的grep 命令跟 netstat命令</h1><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep——Global Regular Expression Print——匹配指定内容</span><br><span class="line">ps aux|grep php     #查看php进程信息</span><br><span class="line"></span><br><span class="line">netstat    用于显示各种网络相关信息</span><br><span class="line">参数 </span><br><span class="line">-a  所有选项</span><br><span class="line">-t (tcp)仅显示tcp相关</span><br><span class="line">-u (udp)仅显示udp相关</span><br><span class="line">-n 拒绝显示别名</span><br><span class="line">-l 仅列出有在 Listen (监听) 的服务状态,liru socket</span><br><span class="line">-p 显示建立相关链接的程序名</span><br><span class="line">-r 显示路由信息，路由表 </span><br><span class="line">-e 显示扩展信息，例如uid等 </span><br><span class="line">-s 按各个协议进行统计 </span><br><span class="line">-c 每隔一个固定时间，执行该netstat命令</span><br><span class="line"></span><br><span class="line">netstat -antup              #所有端口</span><br><span class="line">netstat -antup | grep ftp   #显示ftp相关端口</span><br></pre></td></tr></table></figure></code></pre><p><a href="https://www.cnblogs.com/mydriverc/p/8303242.html" target="_blank" rel="noopener">grep匹配</a>     <a href="https://www.cnblogs.com/sparkdev/p/11294517.html" target="_blank" rel="noopener">netstat详解</a></p>
<h1 id="查找软件安装地址"><a href="#查找软件安装地址" class="headerlink" title="查找软件安装地址"></a>查找软件安装地址</h1><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br><span class="line">find &#x2F; -name mod_dav_svn.so</span><br><span class="line">find &#x2F; -name httpd.pid  #查找模块位置</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      <categories>
        <category>服务端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux httpd</title>
    <url>/posts/3481719661.html</url>
    <content><![CDATA[<h1 id="apachectl-跟httpd区别"><a href="#apachectl-跟httpd区别" class="headerlink" title="apachectl 跟httpd区别"></a>apachectl 跟httpd区别</h1><blockquote>
<p>Apachectl =&gt;  Apache control 控制器(开，关，重启..)<br>httpd 是Apache的进程,可以有多个<br>apachectl 指令是apache http服务器的前端控制程序<br>协助控制apache服务的守护进程httpd</p>
</blockquote>
<a id="more"></a>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td>启动apache httpd守护进程</td>
</tr>
<tr>
<td>restart</td>
<td>重启apache httpd守护进程</td>
</tr>
<tr>
<td>stop</td>
<td>停止apache httpd守护进程</td>
</tr>
<tr>
<td>status</td>
<td>显示apache服务的简要信息</td>
</tr>
<tr>
<td>graceful</td>
<td>优雅重启apache服务，和restart不一样，不会中断当前已经打开的http连接，不会立刻关闭日志</td>
</tr>
<tr>
<td>graceful-stop</td>
<td>优雅停止apache服务，和stop不一样，不会中断当前已经打开的http连接，不会立刻关闭日志</td>
</tr>
<tr>
<td>configtest</td>
<td>运行apache配置语法检测</td>
</tr>
</tbody></table>
<h1 id="安装apache一般有两种方式"><a href="#安装apache一般有两种方式" class="headerlink" title="安装apache一般有两种方式"></a>安装apache一般有两种方式</h1><h2 id="一、-yum安装"><a href="#一、-yum安装" class="headerlink" title="一、 yum安装"></a>一、 yum安装</h2><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/usr/sbin/apachectl</td>
<td>yum安装的apachectl启动位置</td>
</tr>
<tr>
<td>/usr/sbin/httpd</td>
<td>yum安装的httpd启动位置</td>
</tr>
<tr>
<td>cd /usr/sbin/</td>
<td>进入httpd启动文件目录</td>
</tr>
<tr>
<td>./httpd</td>
<td>启动当前httpd服务</td>
</tr>
<tr>
<td>./httpd -k stop</td>
<td>停止 httpd运行</td>
</tr>
<tr>
<td>cd /etc/httpd/logs/</td>
<td>进入日志目录</td>
</tr>
<tr>
<td>cat /etc/httpd/logs/error_log</td>
<td>查看错误日志</td>
</tr>
</tbody></table>
<h2 id="二、-手动安装apache2"><a href="#二、-手动安装apache2" class="headerlink" title="二、 手动安装apache2"></a>二、 手动安装apache2</h2><table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/usr/local/Apache2/bin/Apachectl</td>
<td>手动启动Apachectl 程序</td>
</tr>
<tr>
<td>/usr/local/Apache2/bin/httpd</td>
<td>手动启动httpd程序</td>
</tr>
<tr>
<td>./usr/local/Apache2/bin/httpd</td>
<td>手动启动当前httpd服务</td>
</tr>
<tr>
<td>./usr/local/Apache2/bin/httpd -k stop</td>
<td>手动停止 httpd运行</td>
</tr>
<tr>
<td>cd /usr/local/apache2/logs</td>
<td>进入日志目录</td>
</tr>
<tr>
<td>cat /usr/local/apache2/logs/error_log</td>
<td>apache2 错误日志</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>服务器</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>httpd</tag>
      </tags>
  </entry>
  <entry>
    <title>linux install git</title>
    <url>/posts/3337199416.html</url>
    <content><![CDATA[<h2 id="在centOS7源码安装git"><a href="#在centOS7源码安装git" class="headerlink" title="在centOS7源码安装git"></a>在centOS7源码安装git</h2><pre><code>摘录：不使用 yum install git,这样安装的git版本低
1. 先查看是否安装,使用命令 git --version
2. 有就先删除,执行命令 yum remove git
3. 再执行源码安装</code></pre><h2 id="源码安装步骤"><a href="#源码安装步骤" class="headerlink" title="源码安装步骤"></a>源码安装步骤</h2><ol>
<li>先下载源码文件,并且解压到指定文件(我安装版本是2.11.1,安装到/usr/local/git-2.11.1)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd      #进入到根目录即 &#x2F;root</span><br><span class="line">wget https:&#x2F;&#x2F;www.kernel.org&#x2F;pub&#x2F;software&#x2F;scm&#x2F;git&#x2F;git-2.11.1.tar.gz  #使用wget命令下载</span><br><span class="line">tar -xzvf  &#x2F;root&#x2F;git-2.19.2.tar.gz -C &#x2F;usr&#x2F;local    #将压缩包解压到指定目录</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;git-2.11.1    #进入解压的git目录</span><br><span class="line">开始配置git</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git-2.11.1 --with-iconv --with-curl --with-expat&#x3D;&#x2F;usr&#x2F;local&#x2F;lib     #开始配置</span><br><span class="line">make &amp;&amp; make install            #编译再安装</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="安装可能会出现的问题"><a href="#安装可能会出现的问题" class="headerlink" title="安装可能会出现的问题"></a>安装可能会出现的问题</h2><ol>
<li>运行 git –version出现错误<br> <img data-src="/img/centos-git1.png" alt="linux安装源码git"><ul>
<li>解决方法： 在linux中，/etc/profile文件中添加git环境变量</li>
<li>添加git环境变量添加到 /etc/profile（前提是你的git安装目录就在 /usr/git）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git-2.11.1&#x2F;bin&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile   #使修改的文件生效</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>运行git clone或者git push 出现错误 fatal: Unable to find remote helper for ‘https’<br> <img data-src="/img/centos-git2.png" alt="linux安装源码git"><ul>
<li>解决方法： 添加 git-remote-https（可查看/usr/local/git-2.11.1/libexec/git-core 目录下缺少 git-remote-https）</li>
<li>安装依赖，并且编译后安装到git-2.11.1目录下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git-2.11.1 with-curl&#x3D;&#x2F;usr&#x2F;include&#x2F;curl&#x2F; all</span><br><span class="line">make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git-2.11.1 install</span><br></pre></td></tr></table></figure></li>
<li>将 /usr/local/git-2.11.1/libexec/git-core 写入环境变量PATH<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git-2.11.1&#x2F;libexec&#x2F;git-core&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile  #使修改的文件生效</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="注意：进行环境变量的编辑"><a href="#注意：进行环境变量的编辑" class="headerlink" title="注意：进行环境变量的编辑"></a>注意：进行环境变量的编辑</h2><pre><code>    1. 修改 /root/.bashrc文件,只对当前用户有用
    2. 修改 /etc/profile文件,对所有用户有用

&apos;./configure --prefix=/ &apos; 的作用是：编译的时候用来指定程序存放路径
不指定地址,可执行文件默认放在/usr/local/bin
库文度件默认放在/usr/local/lib
配置文件默认放在/usr/local/etc
其它的资源文件放在/usr/local/share</code></pre>]]></content>
      <categories>
        <category>服务端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux findSofe</title>
    <url>/posts/1207104400.html</url>
    <content><![CDATA[<h1 id="centOS7查找安装文件后的路径"><a href="#centOS7查找安装文件后的路径" class="headerlink" title="centOS7查找安装文件后的路径"></a>centOS7查找安装文件后的路径</h1><pre><code>问题描述：如何查看yum install xx 安装文件后的路径</code></pre><h2 id="以安装svnserve文件为例"><a href="#以安装svnserve文件为例" class="headerlink" title="以安装svnserve文件为例"></a>以安装svnserve文件为例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install subversion</span><br></pre></td></tr></table></figure>
<h2 id="rpm和管道查找具体安装文件全称"><a href="#rpm和管道查找具体安装文件全称" class="headerlink" title="rpm和管道查找具体安装文件全称"></a>rpm和管道查找具体安装文件全称</h2><ol>
<li>列出所有安装的  subversion<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -q  |grep subversion    #软件是否安装</span><br><span class="line">rpm -qa |grep subversion    #查找安装文件全称</span><br><span class="line">rpm -ql |grep subversion    #列出软件包安装的文件</span><br><span class="line">rpm -qal|grep subversion    #查找所有相关存储文件，包括路径</span><br></pre></td></tr></table></figure>
<img data-src="/img/centOS1.png" alt="查找位置"></li>
<li>使用命令 rpm -q |grep subversion-1.7.14-14.el7.x86_64 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -q |grep subversion-1.7.14-14.el7.x86_64   #根据具体文件全称显示安装后文件所在路径</span><br><span class="line">rpm -qa |grep subversion-1.7.14-14.el7.x86_64   #根据具体文件全称显示安装后文件所在路径</span><br></pre></td></tr></table></figure>
 -q是 query   -a是 all     -l是 list</li>
</ol>
]]></content>
      <categories>
        <category>服务端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 环境变量</title>
    <url>/posts/183057146.html</url>
    <content><![CDATA[<h1 id="linux-环境变量配置"><a href="#linux-环境变量配置" class="headerlink" title="linux 环境变量配置"></a>linux 环境变量配置</h1><pre><code>我们来看看执行的顺序：
    1./etc/profile
    2./etc/environment
    3.~/.bash_profile
    4.~/.bashrc
    5./etc/bashrc
source ~/.bashrc #保存设置，立即生效</code></pre>]]></content>
      <categories>
        <category>服务端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 软件安装位置</title>
    <url>/posts/1219779716.html</url>
    <content><![CDATA[<h1 id="Linux系统使用yum安装跟源码安装区别"><a href="#Linux系统使用yum安装跟源码安装区别" class="headerlink" title="Linux系统使用yum安装跟源码安装区别"></a>Linux系统使用yum安装跟源码安装区别</h1><pre><code>摘录:
    1. 安装位置不用
    2. [yum自定义安装,卸载时会自动卸载依赖，带来-系统崩溃,重装-问题，自定义不会]</code></pre><p><a href="https://www.cnblogs.com/feibazhf/p/9765444.html" target="_blank" rel="noopener">yum自定义,崩溃，重装</a></p>
<h2 id="例如安装apache2的版本即httpd"><a href="#例如安装apache2的版本即httpd" class="headerlink" title="例如安装apache2的版本即httpd"></a>例如安装apache2的版本即httpd</h2><h2 id="第一种，使用-yum-install-httpd"><a href="#第一种，使用-yum-install-httpd" class="headerlink" title="第一种，使用 yum install httpd"></a>第一种，使用 yum install httpd</h2><pre><code>我用yum命令，安装的时候，配置文件，服务目录
/etc/httpd/conf/httpd.conf      # httpd    配置文件
/etc/httpd                      # httpd    服务目录，即安装位置
/var/www/html/                  # 存放主页
/var/log/httpd/                 # 存放日志文件
/usr/share/doc                  # 各种软件的文档
/etc/httpd/bin/httpd -k start   #启动位置</code></pre><h2 id="第二种，使用源码安装，借助某云的安装"><a href="#第二种，使用源码安装，借助某云的安装" class="headerlink" title="第二种，使用源码安装，借助某云的安装"></a>第二种，使用源码安装，借助某云的安装</h2><pre><code>使用自定义安装 httpd使用 apache2这个名字
/usr/local/apache2/conf/httpd.conf      #配置文件
/usr/local/apache2                      #自定义安装,服务目录
/usr/local/apache2/htdocs/              #存放主页
/usr/local/apache2/bin/httpd -k start   #启动位置</code></pre><h2 id="第三种，使用rpm安装"><a href="#第三种，使用rpm安装" class="headerlink" title="第三种，使用rpm安装"></a>第三种，使用rpm安装</h2><p><a href="https://www.jianshu.com/p/7794f80d89f2" target="_blank" rel="noopener">rpm包会安装在默认位置/etc/rc.d/init.d/ =&gt;（软链接 /etc/init.d/)</a></p>
<h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h2><pre><code>yum安装后启动方式是:脚本路径 + 命令
例如  /etc/rc.d/init.d/httpd start
--------------------------------------------
service httpd start             # centos6版本
systemctl start httpd.service   # centos7版本

rpm包安装后开机自启动的方法</code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p><a href="https://www.cnblogs.com/gmlkl/p/9354254.html#_label9" target="_blank" rel="noopener">以上三种安装区别</a><br><a href="https://blog.csdn.net/yu876876/article/details/79739413" target="_blank" rel="noopener">yum安装与rpm安装的区别</a></p>
]]></content>
      <categories>
        <category>服务端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 用户</title>
    <url>/posts/338578885.html</url>
    <content><![CDATA[<h1 id="理解-etc-passwd-里面的文件信息"><a href="#理解-etc-passwd-里面的文件信息" class="headerlink" title="理解 /etc/passwd 里面的文件信息"></a>理解 /etc/passwd 里面的文件信息</h1><pre><code>apache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin    #对应的含义
用户名  : 
密码，出于安全考虑，均显示x: 
用户id:UID
用户组id:GID
备注:
用户home目录:
shell命令所在目录:/sbin/nologin意思是无法登陆系统</code></pre><a id="more"></a>
<h1 id="一、-查看所有用户"><a href="#一、-查看所有用户" class="headerlink" title="一、 查看所有用户"></a>一、 查看所有用户</h1><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd     #例如下</span><br><span class="line">apache:x:48:48:Apache:&#x2F;usr&#x2F;share&#x2F;httpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">cat &#x2F;etc&#x2F;group      #例如下</span><br><span class="line">group_name:passwd:GID:user_list</span><br><span class="line">组名：密码：组ID：所有用户</span><br></pre></td></tr></table></figure></code></pre><h1 id="添加删除用户"><a href="#添加删除用户" class="headerlink" title="添加删除用户"></a>添加删除用户</h1><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser snow        #添加用户snow，并且&#x2F;home&#x2F;snow自动生成</span><br><span class="line">userdel -r snow     #删除用户，&#x2F;home&#x2F;snow也会自动删除</span><br><span class="line">passwd snow         #为用户snow添加密码</span><br></pre></td></tr></table></figure></code></pre><h1 id="用户和组常用命令"><a href="#用户和组常用命令" class="headerlink" title="用户和组常用命令"></a>用户和组常用命令</h1><pre><code>groups      #查看当前登录用户的组内成员
groups test #查看test用户所在的组,以及组内成员
whoami      #查看当前登录用户名
cat /etc/passwd|grep snow #查找snow用户</code></pre>]]></content>
      <categories>
        <category>服务端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux</title>
    <url>/posts/2450605904.html</url>
    <content><![CDATA[<h2 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h2><ol>
<li>基础指令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lntp   <span class="comment">#查看端口</span></span><br></pre></td></tr></table></figure>
效果如下:</li>
</ol>
<p><img data-src="/img/pid.png" alt="端口"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 7198    <span class="comment">#最高权限关闭对应PID进程即httpd进程</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>linux文件,文件夹操作<ul>
<li>展示目录列表 ls (list)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls              <span class="comment">#展示当前目录下的可见文件</span></span><br><span class="line">ls -a           <span class="comment">#展示当前目录下所有的文件（包括隐藏）</span></span><br><span class="line">ls -l(ll)       <span class="comment">#展示当前目录下文件的详细信息</span></span><br><span class="line">ll -a           <span class="comment">#展示当前目录下所有文件的详细信息</span></span><br><span class="line">ll -h           <span class="comment">#友好显示当前目录下文件的详细信息（其实就是文件的大小可读性更好</span></span><br></pre></td></tr></table></figure></li>
<li>展示目录列表 cd (change directory)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span>     <span class="comment">#切换到test目录下</span></span><br><span class="line"><span class="built_in">cd</span> ..       <span class="comment">#切换到上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> /        <span class="comment">#切换到系统根目录下</span></span><br><span class="line"><span class="built_in">cd</span> ~        <span class="comment">#切换到当前用户的根目录下</span></span><br><span class="line"><span class="built_in">cd</span> -        <span class="comment">#切换到上一级所在的目录</span></span><br></pre></td></tr></table></figure></li>
<li>目录的创建（mkdir）和删除（rmdir）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span>        <span class="comment">#当前目录下创建test目录</span></span><br><span class="line">mkdir -p <span class="built_in">test</span>/a/b <span class="comment">#在test目录下的a目录下创建一个b目录，</span></span><br><span class="line">                  <span class="comment">#如果上一级目录不存在，则连它的父目录一起创建</span></span><br><span class="line">rmdir <span class="built_in">test</span>        <span class="comment">#删除当前目录下的test目录（注意：该命令只能够删除空目录）</span></span><br></pre></td></tr></table></figure></li>
<li>文件的创建（touch）和删除（rm）命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch test.txt    <span class="comment">#在当前目录下创建一个test.txt的文件</span></span><br><span class="line">rm test.txt       <span class="comment">#删除test.txt的文件（带询问的删除，需输入y才能删除）</span></span><br><span class="line">rm -f test.txt    <span class="comment">#直接删除text.txt文件（force 强制）</span></span><br><span class="line">rm -r <span class="built_in">test</span>        <span class="comment">#递归删除，即删除test目录以及其目录下的子目录（带询问的删除）</span></span><br><span class="line">rm -rf <span class="built_in">test</span>       <span class="comment">#直接删除test目录以及其目录下的子目录</span></span><br><span class="line">cat test.txt      <span class="comment">#查看当前目录test.txt文件</span></span><br></pre></td></tr></table></figure></li>
<li>复制文件 cf (copy file)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  cp  sourceFile  destinationFile   <span class="comment">#当sourceFile 和 destinationFile 参数都是文件名时，cp 命令将源文件内容复制到一个新文件，该新文件以destinatioFile命名。源文件内容不变。新文件有全新的从创建时间和修改时间</span></span><br><span class="line"><span class="comment">#注意：当 destinationFile 已存在时，一般 Linux 系统会提醒用户是否覆盖原有文件</span></span><br><span class="line"></span><br><span class="line">  mv passwd passwd.default</span><br><span class="line">  <span class="comment">#将passwd文件 更名为 passwd.default 内容不变，</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>服务端</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown操作</title>
    <url>/posts/3943068264.html</url>
    <content><![CDATA[<h2 id="如何让博文列表不显示全部内容"><a href="#如何让博文列表不显示全部内容" class="headerlink" title="如何让博文列表不显示全部内容"></a>如何让博文列表不显示全部内容</h2><ol>
<li>答案是在合适的位置加上  <a id="more"></a>  即可，如下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line">1. 全是静态文件，访问速度快；</span><br><span class="line">2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">5. 博客内容可以轻松打包、转移、发布到其它平台</span><br></pre></td></tr></table></figure>

<ol>
<li>链接形式,图片链接，效果如下:</li>
</ol>
<p><img data-src="http://static.runoob.com/images/runoob-logo.png" alt="alt 属性文本" title="RUNOOB"><br><a href="/">参考链接样式2</a></p>
<!-- <img style="border:2px solid red;" data-src="http://static.runoob.com/images/runoob-logo.png" alt="图片替换文本" width="200" height="53" align="bottom" /> -->

<!--more-->
<p>参考地址：  <a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">官方文档</a>  &ensp; <a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93524368" target="_blank" rel="noopener">其他链接</a></p>
<h1 id="表格（一定要贴边）"><a href="#表格（一定要贴边）" class="headerlink" title="表格（一定要贴边）"></a>表格（一定要贴边）</h1><table>
<thead>
<tr>
<th>文件目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>authz</td>
<td>设置用户,以及读写权限</td>
</tr>
<tr>
<td>passwd</td>
<td>设置用户密码</td>
</tr>
<tr>
<td>svnserve.conf</td>
<td>配置当前版本库(允许匿名用户，仓库：地址等)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 源码安装</title>
    <url>/posts/1278193532.html</url>
    <content><![CDATA[<h1 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.9.9.tar.gz  #安装 1.9.9</span><br><span class="line">tar xvf nginx-1.9.9.tar.gz -C &#x2F;usr&#x2F;local&#x2F;src       #解压到指定目录</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.9.9                       #进入解压的nginx目录</span><br><span class="line"></span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx       #配置</span><br><span class="line">make &amp;&amp; make install                    #编译后执行</span><br></pre></td></tr></table></figure>
<h1 id="监测是否安装成功"><a href="#监测是否安装成功" class="headerlink" title="监测是否安装成功"></a>监测是否安装成功</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;     #进入安装目录</span><br><span class="line">.&#x2F;sbin&#x2F;nginx -t         #c出现以下说明安装ok</span><br><span class="line"></span><br><span class="line">nginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful</span><br></pre></td></tr></table></figure>
<ol>
<li><p>测试是否修改成功：<br> /usr/local/nginx/sbin/nginx -t</p>
</li>
<li><p>启动nginx<br> /usr/local/nginx/sbin/nginx</p>
</li>
<li><p>重新加载<br> /usr/local/nginx/sbin/nginx -s reload</p>
</li>
<li><p>错误日志<br> cat /usr/local/nginx/logs/error.log</p>
</li>
<li><p>配置目录<br> vim /usr/local/nginx/conf/nginx.conf</p>
</li>
<li><p>配置nginx开机自启动<br> vim /etc/rc.d/rc.local      #添加<br> /usr/local/nginx/sbin/nginx</p>
</li>
<li><p>配置环境变量（前提是你的nginx是要配置开机启动）</p>
<pre><code>vim /etc/profile #添加下面代码</code></pre></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种：</span><br><span class="line">export NGINX_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">export PATH&#x3D;$PATH:$NGINX_HOME&#x2F;sbin</span><br><span class="line">第二种：</span><br><span class="line">echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&quot; &gt; &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>保存配置<br> source /etc/profile         #编译完保存配置<br> nginx -v                    #查看版本<br> ~/.bashrc里面加一句source /etc/profile</li>
<li>重启后 nginx -v 失效，需要source /etc/profile运行设置<br> 解决：<br> /root/.bashrc 里面加一句 source /etc/profile    </li>
</ol>
<h1 id="nginx-启动报错"><a href="#nginx-启动报错" class="headerlink" title="nginx 启动报错"></a>nginx 启动报错</h1><pre><code>问题 Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid  
解决：
    /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
    使用nginx -c的参数指定nginx.conf文件的位置
    cd /usr/local/nginx//logs/
    ll  #nginx.pid文件已经有了</code></pre><h1 id="centOS版本自定义安装的nginx，配置启动文件"><a href="#centOS版本自定义安装的nginx，配置启动文件" class="headerlink" title="centOS版本自定义安装的nginx，配置启动文件"></a>centOS版本自定义安装的nginx，配置启动文件</h1><pre><code>[Unit]
Description=nginx
After=network.target

[Service]
Type=forking
ExecStart=/usr/local/nginx/sbin/nginx    #修改为自己系统对应的路径
ExecReload=/usr/local/nginx/sbin/nginx -s reload #修改为自己系统对应的路径
ExecStop=/usr/local/nginx/sbin/nginx -s quit    #修改为自己系统对应的路径
PrivateTmp=true

[Install]
WantedBy=multi-user.target</code></pre>]]></content>
      <categories>
        <category>服务端</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>php fpm</title>
    <url>/posts/3224789851.html</url>
    <content><![CDATA[<h1 id="fpm进程池"><a href="#fpm进程池" class="headerlink" title="fpm进程池"></a>fpm进程池</h1><pre><code>摘录：
    php-fpm ：php 是作为一个独立服务存在的，这个服务叫做 php-fpm
    php-fpm pool ： php-fpm进程池，这个进程池中运行了多个子进程，用来并发处理所有连接的动态请求
    配置多个pool：apache或者Nginx接收到php动态请求，传给php-fpm处理，然后调用pool中的子进程处理动态请求</code></pre><h1 id="配置文件地址（假设你的是inux系统）"><a href="#配置文件地址（假设你的是inux系统）" class="headerlink" title="配置文件地址（假设你的是inux系统）"></a>配置文件地址（假设你的是inux系统）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.conf         #查看配置目录</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d             #进入拓展配置目录</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d             #进入拓展配置目录</span><br><span class="line">cat &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf   #查看拓展配置文件</span><br><span class="line">    可以配置用户组、用户名,多个子进程</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;php&#x2F;sbin&#x2F;php-fpm                 #启动fpm进程,报错后,可以修改配置</span><br><span class="line">ps aux|grep php-fpm                         #查看fpm进程</span><br><span class="line">netstat -antup | grep php-fpm               #查看端口PID,kill PID 进程,再重启</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务端</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php tp搭建</title>
    <url>/posts/687102308.html</url>
    <content><![CDATA[<h1 id="搭建thinkphp"><a href="#搭建thinkphp" class="headerlink" title="搭建thinkphp"></a>搭建thinkphp</h1><blockquote>
<p>git上下载的thinkphp5框架使用.gitignore没上传依赖,<br>需要通过composer进行下载依赖，使用composer install或者composer update即可解决</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer install -vvv  #安装依赖，查看进度</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>服务器</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title>snow</title>
    <url>/posts/914597299.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="37d07ae0d22214035449612df8f71dc4eff19211a6c1fbaf6606264fc4790df2">eeb8ea072df15d23c8012e9e276ada2080edd847b600a636fba09a66100a2b772ea4df13da00216321da0fbd3b8bae7e834511154f8ff15f86e13dd810fd999544c66ee0913fbb432bace5d58b8433b8176e1eb7a3d90f99ed56529a9b5b5aed31631b8dc5792d7c961c620a4e376530</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli2</title>
    <url>/posts/3297977961.html</url>
    <content><![CDATA[<h2 id="vue-cli2和vue-cli3的使用和区别"><a href="#vue-cli2和vue-cli3的使用和区别" class="headerlink" title="vue-cli2和vue-cli3的使用和区别"></a>vue-cli2和vue-cli3的使用和区别</h2><pre><code>基础知识准备  node，npm</code></pre><h2 id="vue-cli脚手架的基础使用"><a href="#vue-cli脚手架的基础使用" class="headerlink" title="vue-cli脚手架的基础使用"></a>vue-cli脚手架的基础使用</h2><ol>
<li>查看脚手架全局是否安装（全局安装更是为了方便初始化,创建新项目）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  vue -V   <span class="comment"># 大写的V </span></span><br><span class="line">            <span class="comment"># 2.X的就输出版本号    例如  2.9.6</span></span><br><span class="line">            <span class="comment"># 3.X or 4.0输出      例如  @vue/cli 4.x.x</span></span><br></pre></td></tr></table></figure></li>
<li>安装与删除vue-cli<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli      <span class="comment">#全局安装vue-cli2</span></span><br><span class="line">npm install -g @vue/cli     <span class="comment">#全局安装vue-cli3</span></span><br><span class="line">npm uninstall -g vue-cli    <span class="comment">#全局移除vue-cli2</span></span><br><span class="line">npm uninstall -g @vue/cli   <span class="comment">#全局移除vue-cli3</span></span><br><span class="line"></span><br><span class="line">npm install --save vue-cli  <span class="comment">#也可局部安装vue-cli2</span></span><br></pre></td></tr></table></figure></li>
<li>初始化项目<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack my-project     <span class="comment">#Vue CLI2 初始化项目</span></span><br><span class="line">vue create my-project           <span class="comment">#Vue CLI3 初始化项目</span></span><br></pre></td></tr></table></figure></li>
<li>启动项目（可自己配置启动命令）   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev     <span class="comment">#2.X启动</span></span><br><span class="line">npm run server  <span class="comment">#3.X启动</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>1. 3.x 需要自己手动去写一些配置文件</code></pre><h6 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h6><p><a href="https://www.jianshu.com/p/fa9f80e56144" target="_blank" rel="noopener">链接1</a> &ensp;<a href="https://blog.csdn.net/qq_37818095/article/details/82351479" target="_blank" rel="noopener">链接2</a> &ensp; <a href="https://www.cnblogs.com/JCDXH/p/11703199.html" target="_blank" rel="noopener">链接3</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 数据监测</title>
    <url>/posts/533985533.html</url>
    <content><![CDATA[<h1 id="vue-数据双向绑定"><a href="#vue-数据双向绑定" class="headerlink" title="vue 数据双向绑定"></a>vue 数据双向绑定</h1><p><a href="/posts/1988130116.html">可对比angular的脏检查</a></p>
<pre><code>Object.defineProperty 实现数据变动侦测</code></pre><p>region { 这是折叠区标题的头<br>这是折叠区中的文本<br>这还是折叠区中的文本<br>} region 这是折叠区标题的尾</p>
<p>｜       标题       ｜<br>｜==================｜<br>｜ 表头1  ｜ 表头2  ｜<br>｜:——-｜:——-｜<br>｜单元格1 ｜单元格2 ｜</p>
<p><a href="/">链接文字</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>centOS下基于LAMP环境，使用gitee的webhook完成自动部署</title>
    <url>/posts/3529366497.html</url>
    <content><![CDATA[<h2 id="webhook是做什么的？"><a href="#webhook是做什么的？" class="headerlink" title="webhook是做什么的？"></a>webhook是做什么的？</h2><pre><code>当你使用gitee提交项目，利用gitee提供的webhook钩子,触发钩子执行脚本,
将gitee项目克隆或者更新到自己的线上地址</code></pre><h2 id="centOS下基于LAMP环境，使用gitee的webhook完成自动部署"><a href="#centOS下基于LAMP环境，使用gitee的webhook完成自动部署" class="headerlink" title="centOS下基于LAMP环境，使用gitee的webhook完成自动部署"></a>centOS下基于LAMP环境，使用gitee的webhook完成自动部署</h2><pre><code>必备知识：
    1. 线上搭建LAMP环境
    2. git知识
    3. linux基础
    4. php基础</code></pre><a id="more"></a>
<h2 id="大致流程（网上有很多参考-可自行搜索）"><a href="#大致流程（网上有很多参考-可自行搜索）" class="headerlink" title="大致流程（网上有很多参考,可自行搜索）"></a>大致流程（网上有很多参考,可自行搜索）</h2><ol>
<li>首先在gitee上创建一个项目（可以搜索到）</li>
<li>登录gitee上的该项目,找到该项目的  [管理]<br><img data-src="/img/webhook1.png" alt="webhook1"></li>
<li>点击webhook按钮,添加当前项目的webhook（添加的地址一定是可以直接访问,可不设置密码）<br><img data-src="/img/webhook2.png" alt="webhook2"></li>
<li>在线上创建push.php(push是自定义文件名字)</li>
<li>写入代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    &#x2F;&#x2F;测试当前脚本能否正常启动,可以解开注释</span><br><span class="line">    &#x2F;&#x2F; $output &#x3D; shell_exec(&#39;ls -lart&#39;);</span><br><span class="line">    &#x2F;&#x2F; echo &quot;&lt;pre&gt;$output&lt;&#x2F;pre&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;git webhook 自动部署脚本</span><br><span class="line">    &#x2F;&#x2F;项目存放物理路径,第一次clone时,必须保证该目录为空</span><br><span class="line">    $savePath &#x3D; &quot;&#x2F;var&#x2F;www&#x2F;webhook&#x2F;&quot;;    &#x2F;&#x2F;下载到指定目录</span><br><span class="line">    $gitPath  &#x3D; &quot;https:&#x2F;&#x2F;gitee.com&#x2F;yourname&#x2F;hook.git&quot;;&#x2F;&#x2F;代码仓库</span><br><span class="line">    $email &#x3D; &quot;12345678@qq.com&quot;;&#x2F;&#x2F;用户仓库邮箱</span><br><span class="line">    $name  &#x3D; &quot;12345678@qq.com&quot;;&#x2F;&#x2F;仓库用户名,一般和邮箱一致即可</span><br><span class="line"></span><br><span class="line">    $isClone &#x3D; true;&#x2F;&#x2F;设置是否已经Clone到本地,true:已经clone,直接pull,false:先clone.</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如果已经clone过,则直接拉去代码</span><br><span class="line">    if ($isClone) &#123;</span><br><span class="line">        $requestBody &#x3D; file_get_contents(&quot;php:&#x2F;&#x2F;input&quot;);</span><br><span class="line">        if (empty($requestBody)) &#123;</span><br><span class="line">            die(&#39;send fail&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;将Git服务器发出的数据转化为JSON信息</span><br><span class="line">        $content &#x3D; json_decode($requestBody, true);</span><br><span class="line">        &#x2F;&#x2F;多加几个条件判断</span><br><span class="line">        if ($content[&#39;ref&#39;]&#x3D;&#x3D;&#39;refs&#x2F;heads&#x2F;master&#39; &amp;&amp; $content[&#39;total_commits_count&#39;]&gt;0) &#123;</span><br><span class="line">            $res &#x3D; PHP_EOL.&quot;pull 开始 --------&quot;.PHP_EOL;</span><br><span class="line">            $res .&#x3D; shell_exec(&quot;cd &#123;$savePath&#125; &amp;&amp; sudo &#x2F;usr&#x2F;local&#x2F;git-2.11.1&#x2F;bin&#x2F;git pull&quot;);&#x2F;&#x2F;拉去代码</span><br><span class="line">            $res_log &#x3D; &#39;-------------------------&#39;.PHP_EOL;</span><br><span class="line">            $res_log .&#x3D; $content[&#39;user_name&#39;] . &#39; 在&#39; . date(&#39;Y-m-d H:i:s&#39;) . &#39;向&#39; . $content[&#39;repository&#39;][&#39;name&#39;] . &#39;项目的&#39; . $content[&#39;ref&#39;] . &#39;分支push了&#39; . $content[&#39;total_commits_count&#39;] . &#39;个commit：&#39;;</span><br><span class="line">            $res_log .&#x3D; $res.PHP_EOL;</span><br><span class="line">            $res_log .&#x3D; &quot;pull 结束 --------&quot;.PHP_EOL;</span><br><span class="line">            file_put_contents(&quot;webhook_log.txt&quot;, $res_log, FILE_APPEND);&#x2F;&#x2F;写入日志到log文件中</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        $res &#x3D; &quot;clone 开始 --------&quot;.PHP_EOL;</span><br><span class="line">        $res .&#x3D; shell_exec(&quot;sudo &#x2F;usr&#x2F;local&#x2F;git-2.11.1&#x2F;bin&#x2F;git clone &#123;$gitPath&#125; &#123;$savePath&#125;&quot;).PHP_EOL;&#x2F;&#x2F;执行脚本，clone到指定目录</span><br><span class="line">        $res .&#x3D; &quot;clone 结束 --------&quot;.PHP_EOL;</span><br><span class="line">        file_put_contents(&quot;webhook_log.txt&quot;, $res, FILE_APPEND);&#x2F;&#x2F;写入日志到log文件中</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="基于git的webhook部署可能会出现的问题"><a href="#基于git的webhook部署可能会出现的问题" class="headerlink" title="基于git的webhook部署可能会出现的问题"></a>基于git的webhook部署可能会出现的问题</h2><ol>
<li><p>线上安装并且配置好git（推荐源码安装git——我的安装在 /var/local/git-2.11.1）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;天使&quot;              #配置用户名</span><br><span class="line">git config --global user.email &quot;1234567@qq.com&quot;   #配置邮箱</span><br><span class="line">git config --global credential.helper store       #下次git操作不用密码验证</span><br><span class="line">#假设你已经配置好了秘钥</span><br></pre></td></tr></table></figure></li>
<li><p>文件权限问题（线上操作是root用户,而php执行的push.php是用户——用户组都是www）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R www:www &#x2F;var&#x2F;www   #将目录  &#x2F;var&#x2F;www 权限给 www用户组的用户www </span><br><span class="line">chmod 777 &#x2F;var&#x2F;www          #给 目录&#x2F;var&#x2F;www  最高权限</span><br></pre></td></tr></table></figure></li>
<li><p>php-fpm配置（我的php安装目录就在 /usr/local/php）——配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;php&#x2F;sbin&#x2F;php-fpm #启动php-fpm,如果报错，可以找到对应办法</span><br><span class="line">netstat -antup | grep php   #当端口被占用，找到php-fpm的pid，关掉 执行 kill pid</span><br><span class="line">ps -ef | grep php           #查看php用户进程——全部配置为所有者是www</span><br><span class="line">ps -ef | grep php-fpm       #查看php-fpm进程——全部配置为所有者是www</span><br><span class="line"></span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;logs  #进入apache的日志目录</span><br><span class="line">cat error_log               #查看错误日志,调试使用 </span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d #进入配置目录</span><br><span class="line">cp www.conf.default www.conf    #复制出www.conf文件,里面配置用户跟用户组,如下图</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/webhook4.png" alt="webhook4"></p>
</li>
<li><p>报错’This account is currently not available’<br>解决：把www用户的配置修改一下，让他的登录shell变成/bin/bash<br>git拉取完项目后再把www用户的nologin选项恢复回去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 &#x2F;etc&#x2F;passwd       #给passwd文件最高操作权限——一定是在root用户下，才可以编辑修改</span><br><span class="line">chmod 440 &#x2F;etc&#x2F;passwd   #恢复只读权限</span><br></pre></td></tr></table></figure>
<p><img data-src="/img/webhook5.png" alt="webhook5"> </p>
</li>
<li><p>www用户没有免密码设置，因为我的php脚本用户设置的就是www<br><img data-src="/img/webhook3.png" alt="webhook3"><br> 解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 &#x2F;etc&#x2F;sudoers  #给最高权限</span><br><span class="line">chmod 440 &#x2F;etc&#x2F;sudoers  #还原只读权限</span><br><span class="line">sudo visudo             #或者直接运行这个，修改配置</span><br><span class="line">进入后，添加</span><br><span class="line">www     ALL&#x3D;NOPASSWD: &#x2F;usr&#x2F;local&#x2F;git-2.11.1&#x2F;bin&#x2F;git     #这是地址是我的git执行位置</span><br><span class="line">www     ALL&#x3D;(ALL:ALL)  NOPASSWD:ALL     #也可添加这种方式</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>还有webhook部署问题,需要交流学习,请联系邮箱<a href="mailto:897113156@qq.com">snow_007@foxmail.com</a></p>
]]></content>
      <categories>
        <category>服务端</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>php</tag>
      </tags>
  </entry>
</search>
